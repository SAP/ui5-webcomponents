diff --git a/node_modules/playground-elements/playground-code-editor.js b/node_modules/playground-elements/playground-code-editor.js
index ef940bc..dc6aec8 100644
--- a/node_modules/playground-elements/playground-code-editor.js
+++ b/node_modules/playground-elements/playground-code-editor.js
@@ -388,6 +388,15 @@ let PlaygroundCodeEditor = class PlaygroundCodeEditor extends LitElement {
         }
     }
     _requestCompletionsIfNeeded(changeObject) {
+        if (this.type === 'html') {
+            const changeWasCodeCompletion = changeObject.origin === 'complete';
+            if (changeWasCodeCompletion) {
+                // don't show completions again if change was html code completion
+                return;
+            } else {
+                this._showCompletions();
+            }
+        }
         if (this.noCompletions ||
             !this._currentFiletypeSupportsCompletion() ||
             !this._codemirror)
@@ -451,11 +460,32 @@ let PlaygroundCodeEditor = class PlaygroundCodeEditor extends LitElement {
         // Currently we are only supporting code completion for TS. Change
         // this in a case that we start to support it for other languages too.
         return this.type === 'ts';
+        // return this.type === 'ts' || this.type === 'html';
     }
     focus() {
         var _a;
         (_a = this._codemirrorEditable) === null || _a === void 0 ? void 0 : _a.focus();
     }
+    _htmlCompletionsAsHints() {
+        const cm = this._codemirror;
+        const result = htmlHint(cm);
+        if (!result) return;
+        // As CodeMirror doesn't let us directly query if the completion hints are shown,
+        // we want to have our own local state following the completions menu state.
+        CodeMirror.on(result, 'shown', () => {
+            // Delay updating the status by a frame so that key listeners still have
+            // access to the correct state for the current situation.
+            window.requestAnimationFrame(() => {
+                this._completionsOpen = true;
+            });
+        });
+        CodeMirror.on(result, 'close', () => {
+            window.requestAnimationFrame(() => {
+                this._completionsOpen = false;
+            });
+        });
+        return result;
+    }
     _completionsAsHints() {
         var _a, _b;
         const cm = this._codemirror;
@@ -572,12 +602,33 @@ let PlaygroundCodeEditor = class PlaygroundCodeEditor extends LitElement {
       ${preMarkContent}<mark>${markedContent}</mark>${postMarkedContent}
     `;
     }
+    _checkHtmlToken(cm) {
+        console.log(htmlHint(cm));
+        const cur = cm.getCursor()
+        const token = cm.getTokenAt(cur);
+        console.log({cur, token})
+        console.log((token.type === "tag bracket" && token.string === "<"), token.type === "tag",token.type === "attribute" )
+        return (
+            (token.type === "tag bracket" && token.string === "<") // opening tag bracket
+            || token.type === "tag" // tag
+            || token.type === "attribute" // attribute name
+            || (token.type === "string" && token.state.tagName.startsWith("ui5-"))  // inside attribute value
+            || (token.type === null && token.string === "=" && token.state.tagName.startsWith("ui5-"))  // after attribute
+        )
+    }
     _showCompletions() {
         const cm = this._codemirror;
-        if (!cm || !this._completions || this._completions.length <= 0)
+        if (this.type === 'ts' && (!cm || !this._completions || this._completions.length <= 0))
             return;
+
+        if (this.type === 'html') {
+            if (!this._checkHtmlToken(cm)) {
+                return;
+            }
+        }
+        const hint = this.type === 'ts' ? this._completionsAsHints.bind(this) : this._htmlCompletionsAsHints.bind(this);
         const options = {
-            hint: this._completionsAsHints.bind(this),
+            hint: hint,
             completeSingle: false,
             closeOnPick: true,
             closeOnUnfocus: true,
@@ -720,7 +771,7 @@ let PlaygroundCodeEditor = class PlaygroundCodeEditor extends LitElement {
                 // valid JSON.
                 return 'google-javascript';
             case 'html':
-                return 'google-html';
+                return 'text/html';
             case 'css':
                 return 'css';
             case 'jsx':
diff --git a/node_modules/playground-elements/playground-preview.js b/node_modules/playground-elements/playground-preview.js
index 1c2996f..4259730 100644
--- a/node_modules/playground-elements/playground-preview.js
+++ b/node_modules/playground-elements/playground-preview.js
@@ -151,6 +151,7 @@ let PlaygroundPreview = class PlaygroundPreview extends PlaygroundConnectedEleme
 
         <iframe
           title="Project preview"
+          allow="camera; microphone"
           @load=${this._onIframeLoad}
           ?hidden=${!this._loadedAtLeastOnce}
         ></iframe>
@@ -298,7 +299,7 @@ __decorate([
     property()
 ], PlaygroundPreview.prototype, "location", void 0);
 __decorate([
-    query('iframe', true)
+    query('iframe')
 ], PlaygroundPreview.prototype, "iframe", void 0);
 __decorate([
     query('slot')
