"use strict";(self.webpackChunk_ui5_webcomponents_website=self.webpackChunk_ui5_webcomponents_website||[]).push([[1313],{51007:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/productive-table-release","metadata":{"permalink":"/webcomponents/blog/productive-table-release","source":"@site/blog/table_v2/table-v2-release.mdx","title":"The Table Web Component is Now Productive - Here\'s What\'s New","description":"After its half-year tenure as an experimental component since the release of UI5 Web Components 2.0, allowing us to gather feedback","date":"2025-05-15T10:00:00.000Z","formattedDate":"May 15, 2025","tags":[{"label":"table","permalink":"/webcomponents/blog/tags/table"},{"label":"experimental","permalink":"/webcomponents/blog/tags/experimental"}],"readingTime":6.645,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"The Table Web Component is Now Productive - Here\'s What\'s New","tags":["table","experimental"],"slug":"/productive-table-release","date":"2025-05-15T10:00"},"unlisted":false,"nextItem":{"title":"Introducing JSX for web component templates","permalink":"/webcomponents/blog/introducing-jsx"}},"content":"After its half-year tenure as an experimental component since the release of UI5 Web Components 2.0, allowing us to gather feedback\\nand improve the API, the Table component will finally leave its experimental state!\\n\\nThis blog will update you on why we\'ve decided to take this path, the improvements and new features of the `ui5-table`.\\n\\n## Going from Old to New\\n\\nBack in UI5 Web Components 1.x, the library already offered a Table component, which provided developers with capabilities to display\\ndata in a tabular structure.\\n\\nUpgrading to a new version gave us the chance to reassess and reimagine the Table component, allowing us to focus on three core points:\\n* Improved accessibility\\n* Harmonization between the Web Component Table and UI5 Tables\\n* Enhancements to existing APIs and incorporation of new ideas\\n\\nAs providing a completely new component with a fresh and new API might lead to issues, we\'ve decided to publish the Table in an experimental state.\\nThis has given us the time to manifest the final API, but most importantly the chance to listen to your feedback and improve our API based on it.\\n\\nFinally, thanks to your feedback, we removed the experimental state of the `ui5-table`.\\n\\n## What\'s New?\\n\\n### Table and ARIA Structure\\n\\nWe\'ve revamped the structure of the `ui5-table` component. The new structure is heavily inspired by the HTML table, instead of having a dedicated `<ui5-column>`, you\'ll\\ndefine a `<ui5-table-header-row>`, which contains a `<ui5-table-header-cell>`:\\n\\n<table>\\n\\t<tr>\\n\\t\\t<th>HTML Table</th>\\n\\t\\t<th>Web Component Table</th>\\n\\t</tr>\\n\\t<tr>\\n\\t\\t<td>\\n```html\\n<table>\\n  <tr>\\n    <th>Column A</th>\\n    <th>Column B</th>\\n  </tr>\\n  <tr>\\n    <td>Cell 1</td>\\n    <td>Cell 2</td>\\n  </tr>\\n</table>\\n```\\n\\t\\t</td>\\n\\t\\t<td>\\n```html\\n<ui5-table>\\n  <ui5-table-header-row slot=\\"headerRow\\">\\n    <ui5-table-header-cell>Column A</ui5-table-header-cell>\\n    <ui5-table-header-cell>Column B</ui5-table-header-cell>\\n  </ui5-table-header-row>\\n  <ui5-table-row>\\n    <ui5-table-cell>Cell 1</ui5-table-cell>\\n    <ui5-table-cell>Cell 2</ui5-table-cell>\\n  </ui5-table-row>\\n</ui5-table>\\n```\\n\\t\\t</td>\\n\\t</tr>\\n</table>\\n\\nWe\'ve also decided to apply ARIA roles, such as \\"row\\" or \\"gridcell\\", directly to the Web Components instead of hiding them in the Shadow DOM, applying\\nthe semantics directly to the component. \\nThis change in combination with the new structure enables a better accessibility and screen reader support, as the new Table component now structurally\\nand semantically resembles the HTML table, ensuring an easier processing for assistive  technologies.\\n\\n### Keyboard Handling\\n\\nApart from moving the ARIA roles from the Shadow DOM to the \\"light\\" DOM, allowing you to directly reference other components (except for the table root) via `aria-labelledby`, accessibility\\nhas been greatly improved in other areas as well.\\n\\nOne major change you might notice is the updated keyboard handling for the table. While previously you were only able to navigate through the table row by row, the\\nnewly implemented keyboard specification allows you to navigate row by row **and** from cell to cell. This update aligns the Table component with its counterparts\\nin UI5 in terms of keyboard handling.\\n\\n![Keyboard Handling](./images/keyboard_handling.gif)\\n\\nCheck the [SAPUI5 Accessibility for End Users](https://help.sap.com/docs/SAPUI5/bc5a64aac808463baa95b4230f221716/10c137d404874350b886cc988aa63c1c.html?locale=en-US) for more information\\nabout the handling.\\n\\n### Feature Concept\\n\\nIf you use the new `ui5-table` for the first time, you might notice that \\"core features\\" of the former Table implementation might be missing, such as growing capabilities or\\nselection functionality.\\n\\nThis discrepancy is intended as we wanted to provide a lightweight component for users that might not need such features.\\n\\nIf you require selection or growing capabilities, you can extend your Table component by assigning *Features* to it. The core idea of a *Feature* is to provide a\\nplug-and-play option for more complex features of the Table. This allows you to keep the Table as lightweight as possible ensuring only necessary\\ncode/functionality is being used.\\n\\nThe `ui5-table` has a dedicated `features` slot to enable certain features, which are dedicated components. We are currently offering the following features:\\n[TableSelectionSingle](https://ui5.github.io/webcomponents/components/TableSelectionSingle/), [TableSelectionMulti](https://ui5.github.io/webcomponents/components/TableSelectionMulti/),\\n [TableGrowing](https://ui5.github.io/webcomponents/components/TableGrowing/), and [TableVirtualizer](https://ui5.github.io/webcomponents/components/TableVirtualizer/).\\n\\n```html\\n<ui5-table>\\n  ...\\n  <ui5-table-selection-single slot=\\"features\\" />\\n  <ui5-table-growing slot=\\"features\\" />\\n  <ui5-table-virtualizer slot=\\"features\\" />\\n</ui5-table>\\n```\\n\\n#### Selection Feature\\n\\nAs you may have noticed, there are now **two** selection features: `TableSelectionSingle` and `TableSelectionMulti`. Instead of a single, unified selection feature, we chose to separate\\nthem to keep the API lean, clean, and better suited to their respective use cases. This approach also helps manage complexity as each selection mode has distinct API requirements\\nand behaviors.\\n\\nAdditionally, selection is no longer handled at the row level. Previously, `ui5-table-row` had a `selected` property, but this has been removed. Instead, selection is now decoupled from\\nthe table, and the selection feature itself maintains a `selected` property containing the keys of selected rows. To enable this, you need to provide a `row-key` for your rows to uniquely\\nidentify them.\\n\\nFor an example implementation, see [here](https://ui5.github.io/webcomponents/components/TableSelectionMulti/#basic-sample).\\n\\n#### Growing Feature\\n\\nIn addtion to revamping the selection behavior, we\'ve decided to improve and adapt the growing behavior as well. `TableGrowing` enables growing capabilities and provides two different\\ngrowing modes:\\n- `Button`: Renders a button to load more data\\n- `Scroll`: Scrolls to the bottom of the table to load more data\\n\\nWe have slightly improved the `Scroll` behavior: If the table is not scrollable yet, the growing button will be rendered until the table is scrollable. This will always ensure\\nthat the table offers its growing capabilities when using `TableGrowing`.\\n\\nYou can check these samples to see implementations of both growing modes:\\n- [Growing with a Button](https://ui5.github.io/webcomponents/nightly/components/TableGrowing/#growing-with-a-button)\\n- [Growing with Scrolling](https://ui5.github.io/webcomponents/nightly/components/TableGrowing/#growing-with-scrolling)\\n\\n#### Virtualization\\n\\n`TableVirtualizer` is a new feature that is currently still experimental. Its main purpose is to virtualize table rows, allowing you to display huge amounts of data without rendering\\neverything straight to the browser compromising performance.\\n\\nThis feature ensures that only the rows visible in the current viewport are rendered and updated during scrolling. To achieve this, the `TableVirtualizer` offers a\\n`range-change` event allowing you to exchange or update the row contexts and contents accordingly.\\n\\nA sample implementation can be found [here](https://ui5.github.io/webcomponents/components/TableVirtualizer/#basic-sample).\\n\\n![Example of the Virtualizer](./images/virtualizer.gif)\\n\\n### New Functionalities\\n\\n#### Overflow Mode\\n\\nThe old Table component used the popin mode by default, a responsive display option optimal for small screen sizes. Defining a `minWidth` for the column, a minimum table width,\\nallows the column to move into the popin area  if the table is smaller than the specified `minWidth`.\\n\\nThis overall behavior has changed now with the new `ui5-table`.\\n\\nFirst of all, the Table component introduces the `overflowMode`. This property allows you to switch between popin mode and horizontal scrolling, giving you flexibility\\nwith the overflow behavior of your table.\\n\\nFurthermore, the \\"popin configuration\\" has changed. Instead of defining a `minWidth` representing the \\"minimum table width\\", you can define `width` or `minWidth` for the\\ncolumn itself. If the table overflows, the columns that overflow, for example,  if they don\'t fit into the table anymore, will be moved into the \\"popin area\\". This is a more natural\\noverflow behavior allowing you to just define the widths of your columns without worrying about the general table width.\\n\\nSee [here](https://ui5.github.io/webcomponents/components/Table/#overflow-mode) for a sample.\\n\\n#### Row Actions\\n\\nThe `ui5-table` introduces row actions. The `ui5-table-row` has a dedicated `actions` slot, which allows you to add custom row actions to your rows.\\n\\nThere are two row action options:\\n* Use [`TableRowActionNavigation`](https://ui5.github.io/webcomponents/components/TableRowActionNavigation/) to define a navigation action.\\n* Use [`TableRowAction`](https://ui5.github.io/webcomponents/components/TableRowAction/) to define a custom navigation. Provide a text and icon for your custom action.\\n\\n```html\\n<ui5-table-row row-key=\\"2\\">\\n  <ui5-table-cell><ui5-label><b>Astro Laptop 216</b><br><a href=\\"#\\">HT-1251</a></ui5-label></ui5-table-cell>\\n  <ui5-table-row-action slot=\\"actions\\" icon=\\"delete\\" text=\\"Delete\\" handler=\\"onDelete\\"></ui5-table-row-action>\\n  <ui5-table-row-action-navigation slot=\\"actions\\" handler=\\"onNavigate\\" interactive></ui5-table-row-action-navigation>\\n</ui5-table-row>\\n```\\n\\n![Row Actions Sample](./images/row_actions.png)\\n\\n#### Drag And Drop\\n\\nThe Table component is now drag-and-drop-enabled! By utilizing the Table\'s `move-over` and `move` event, you can now move around table rows.\\n\\nThis allows you to implement features such as row reordering, exchanging data between tables, and many more.\\n\\n![Drag And Drop](./images/drag_drop.gif)\\n\\n## Summary\\n\\nThe `ui5-table` and its related components (except for `TableVirtualizer`) are finally \\"graduating\\" from their experimental state and will move into a stable state.\\nThe new table offers new and improved features, accessibility and user experience.\\n\\nFor compatibility reasons, the old table is still available in the `compat` package, but please migrate to the new table implementation to leverage the newest\\nfeatures and functionalities.\\n\\nIf you are interested in learning more about the `ui5-table`, check out the [documentation](https://ui5.github.io/webcomponents/components/Table/), or join\\nus at [UI5con](https://openui5.org/ui5con/)!"},{"id":"/introducing-jsx","metadata":{"permalink":"/webcomponents/blog/introducing-jsx","source":"@site/blog/introducing-jsx.mdx","title":"Introducing JSX for web component templates","description":"We are proud to announce that the 2.6.0 release of the web components adds support for using JSX templates.","date":"2025-01-07T10:00:00.000Z","formattedDate":"January 7, 2025","tags":[{"label":"jsx","permalink":"/webcomponents/blog/tags/jsx"},{"label":"template","permalink":"/webcomponents/blog/tags/template"}],"readingTime":3.68,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Introducing JSX for web component templates","tags":["jsx","template"],"slug":"/introducing-jsx","date":"2025-01-07T10:00"},"unlisted":false,"prevItem":{"title":"The Table Web Component is Now Productive - Here\'s What\'s New","permalink":"/webcomponents/blog/productive-table-release"},"nextItem":{"title":"Announcing UI5 Web Components 2.0! A New Era Begins!","permalink":"/webcomponents/blog/releases/announcing-v2"}},"content":"We are proud to announce that the 2.6.0 release of the web components adds support for using [JSX templates](https://github.com/UI5/webcomponents/pull/10046).\\n\\nUntil now, Handlebars was the only templating language that could be used. The main goal of the project since the beginning was to have declarative renderers, and Handlebars served this purpose well. There were some drawbacks however.\\n\\n## Own HBS compiler\\nSince handlebars originally works with strings only and cannot update the DOM effectively, we had to build our own HBS -> lit-html compiler. This added some technical debt, as not all features from Handlebars were implemented. It also added maintenance effort for a tool we had to update and evolve, when switching to TypeScript for example, or when encountering edge cases not previously considered.\\n\\n## Development experience\\nAll templating languages are by default not understood by IDEs out of the box.\\n\\nCode completion is the biggest gap we were seeing - there was simply no way to tell the IDE what to do without writing a plugin, which would be further development effort.\\n\\nWhile we added type checking (the compiled HBS code is in a `.ts` file so there is some typechecking), it was never complete - type errors are shown in the console, not in the IDE. They were also only top level property type checks - no typechecks inside loops, no typechecks for events and event handlers.\\n\\nCode navigation was also missing - you could not click on a property in a HBS template to navigate to the property definition in the component itself.\\n\\n## JSX\\n\\nJSX is an embeddable HTML-like syntax that gets transformed into JavaScript. It is written inside JavaScript and transformed to JavaScript, which means the TypeScript compiler can do all of the things it does out of the box - not only typechecking, but also provide code completion suggestions and do the code transformation. IDEs also have TypeScript integration, so nothing additional is required.\\n\\n## JSX benefits compared to HBS templates\\n\\nWhat follows is a quick summary of all improvements offered by JSX.\\n\\n### Declarative \u2194\ufe0f\\nNo change here, both are declarative.\\n\\n### Type checking \u2197\ufe0f\\nFull type checking - not only top-level properties, but also loops, events, event handlers, and code in the template as well.\\n\\n### Code completion \u2197\ufe0f\\nFull code completion - TypeScript knows exactly what properties are available for each tag, and what their respective values are. Type errors are shown in the IDE and quick fixes also work out of the box.\\n\\n### Code navigation \u2197\ufe0f\\nUsing Cmd-Click on a property name or an event handler directly jumps to the code location in the component. This was not possible before.\\n\\n### Debugging templates \u2197\ufe0f\\nWhile it was possible to debug lit-html templates, they were big horizontal lines of template literal code and actually kind of hard to debug. JSX templates look like function calls with whitespaces and show a much better structure that is easier to debug.\\n\\n### No IDE plugin needed \u2197\ufe0f\\nAll of the benefits above come without the need to write a plugin - IDEs are already integrated with TypeScript that provides all of the above features for free.\\n\\n### No new tooling \u2197\ufe0f\\nTransforming the template to JavaScript code is handled by the TypeScript compiler. There is absolutely no new code for the transformation step.\\n\\n### Smaller template size \u2197\ufe0f\\nConverting all of the `main` and `fiori` components (~140) reduced the gzip size of the bundle by roughly 20 kB.\\n\\n## Technical aspects\\nThe JSX transformation creates a Virtual DOM, and the actual DOM updates are handled by [Preact](https://preactjs.com/). Preact has a big focus on performance and is very fast and small. Virtual DOM is theoretically slower when updating big lists (as their templates have to be rendered and the diff has to be run), but for the web components, this is not a problem, since the items of the components are coming from the applications and the component only renders a slot where the items will appear.\\n\\n## Summary\\nThe switch to JSX improves the web component development experience immensely. Not only is the development experience better, but in the process of migrating the existing components, a lot of bugs were caught that were simply missed in HBS. Size improvements and the good performance make this a real good step for the framework and for component developers.\\n\\nFor more implementation details, you can check the [template docs](https://ui5.github.io/webcomponents/docs/development/templates/) and the [PR](https://github.com/UI5/webcomponents/pull/10046)"},{"id":"/releases/announcing-v2","metadata":{"permalink":"/webcomponents/blog/releases/announcing-v2","source":"@site/blog/releases/announcing-v2.mdx","title":"Announcing UI5 Web Components 2.0! A New Era Begins!","description":"A Journey of Innovation and Growth","date":"2024-07-03T10:00:00.000Z","formattedDate":"July 3, 2024","tags":[{"label":"release","permalink":"/webcomponents/blog/tags/release"},{"label":"v2","permalink":"/webcomponents/blog/tags/v-2"}],"readingTime":7.505,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Announcing UI5 Web Components 2.0! A New Era Begins!","tags":["release","v2"],"slug":"/releases/announcing-v2","date":"2024-07-03T10:00"},"unlisted":false,"prevItem":{"title":"Introducing JSX for web component templates","permalink":"/webcomponents/blog/introducing-jsx"},"nextItem":{"title":"Popover API in UI5 Web Components 2.0","permalink":"/webcomponents/blog/releases/popover-api-in-v2"}},"content":"## A Journey of Innovation and Growth \\n\\nSince the release of UI5 Web Components 1.0 in 2021, our journey has been marked by unwavering innovation and a commitment to excellence. Over the past three years, we have listened to our community, refined our technologies, and expanded our capabilities. \\n\\n![UI5 Web Components timeline](./img/ui5webcomponents_timeline.png)\\n\\nOur project has continuously evolved, embracing new web standards, eliminating legacy code, and integrating invaluable user feedback from our community to enhance our APIs. This journey culminated in April with the unveiling of the first Release Candidate for UI5 Web Components 2.0.\\n\\n## Announcing UI5 Web Components 2.0! \ud83c\udf89 \\n\\nToday, we stand at a pivotal moment in our evolution with the official launch of UI5 Web Components 2.0. This major release marks a new era, enhancing performance and reliability while setting the stage for future innovations. Our commitment to growth and providing cutting-edge tools for web development ensures we continue to meet the evolving needs of our community.\\n\\n**Key Benefits of UI5 Web Components 2.0**\\n\\nUI5 Web Components 2.0 introduces several substantial improvements: \\n\\n- Embracing New Standards: Future-proofing UI5 Web Components. \\n\\n- Consistent APIs: Streamlined and more intuitive, albeit with some breaking changes. \\n\\n- Elimination of Legacy Code: Reducing footprint and enhancing quality by minimizing bugs.  \\n\\nLooking ahead, we will adhere to Semantic Versioning and release major updates more frequently to keep pace with technological advancements. \\n\\n## What\'s New in UI5 Web Components 2.0? \\n\\n### **Revolutionary Popover API**\\n\\nExperience a standardized, consistent, and flexible mechanism for displaying popover content across all relevant components.  \\nThis API allows popups to display correctly above all other content, eliminating the need for the \\"static area\\" used in version 1.x. Previously, popups were placed in a static area within the body to ensure correct positioning despite various CSS rules. In version 2.x, the [popover API](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover) simplifies the DOM structure by incorporating the popover directly within the component. This results in easier development, maintenance, and enhanced styling capabilities. It also allows components with popups to have physical children, supporting custom content and simplifying testing. The popover API is fully supported by all major browsers. Discover all the practical benefits in our [blog post](https://ui5.github.io/webcomponents/nightly/blog/releases/popover-api-in-v2/).\\n\\n### **Form-Associated Custom Elements**\\n\\nHarness the power of native input behavior within HTML forms. This enhancement makes the features/InputElementsFormSupport.js feature redundant, simplifying form handling and enhancing the developer experience. Refer to the [ElementInternals API documentation](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals) for more details. \\n\\n### **Seamless Time Zone Support**\\n\\nSeamlessly manage time zones within your applications for a more personalized user experience. The date and time components are adapted to the time zone feature, allowing the components to present dates in different time zones. The time zone identifiers format is the one used in the IANA time zone database. See a [sample](https://ui5.github.io/webcomponents/nightly/components/DateTimePicker/#timezones) on our website.\\n\\n### **New Components**\\n\\nExpand your UI toolkit with new components such as Dynamic Page, Form, Table, Text, Tokenizer, AI Button, and AI Prompt Input. \\n\\n- [Dynamic Page](https://ui5.github.io/webcomponents/nightly/components/fiori/DynamicPage/): A layout component, representing a web page, consisting of a title, a header with dynamic behavior, a content area, and an optional floating footer. Use the Dynamic Page if you need to have a title, that is always visible and a header, that has configurable Expanding/Snapping functionality. \\n- [Form](https://ui5.github.io/webcomponents/nightly/components/Form/): The `ui5-form` is a layout component that arranges labels and form fields (like input fields) pairs into a specific number of columns. And, there is also \\"grouping\\" available to assist the implementation of richer UIs. The Form component reacts and changes its layout on predefined breakpoints.\\n- [Table](https://ui5.github.io/webcomponents/nightly/components/Table/): The `ui5-table` component provides a set of sophisticated features for displaying and dealing with vast amounts of data in a responsive manner. This Table replaces the previous Table web component, that has been part of @ui5/webcomponents version 1.x. For compatibility reasons, we moved the previous Table implementation to the `@ui5/webcomponents-compat` package and will be maintained until the new Table is experimental.\\n- [Text](https://ui5.github.io/webcomponents/nightly/components/Text/): The `ui5-text` component displays text that can be used in any content area of an application. By default, the text will wrap when the space is not enough. In addition, the component supports truncation via the max-lines property, which defines the number of lines the text should wrap before it starts truncating.\\n- [Tokenizer](https://ui5.github.io/webcomponents/nightly/components/Tokenizer/): A `ui5-tokenizer` is an invisible container for `ui5-tokens` that supports keyboard navigation and token selection.\\n- [AI Button](https://ui5.github.io/webcomponents/nightly/components/ai/Button/): The `ui5-ai-button` component represents a button used in AI-related scenarios. It enables users to trigger actions by clicking or tapping the ui5-ai-button, or by pressing certain keyboard keys, such as Enter.\\n- [AI Prompt Input](https://ui5.github.io/webcomponents/nightly/components/ai/PromptInput/): The `ui5-ai-prompt-input` component allows the user to write custom instructions in natural language so that AI is guided to generate content tailored to user needs.\\n- [Custom Option](https://ui5.github.io/webcomponents/nightly/components/OptionCustom/): The `ui5-option-custom` component defines a custom content of an option in the `ui5-select`. The component accepts arbitrary HTML content to allow full customization.\\n- [Custom Suggestion Item](https://ui5.github.io/webcomponents/nightly/components/SuggestionItemCustom/): The `ui5-suggestion-item-custom` is a type of suggestion item, that can be used to place suggestion items with custom content in the input. \\n- [Notification List](https://ui5.github.io/webcomponents/nightly/components/fiori/NotificationList/): The `ui5-notification-list` web component acts as a container for `ui5-li-notification-group` and `ui5-li-notification`, delivering the new SAP Design Notification experience.\\n- [List Group](https://ui5.github.io/webcomponents/nightly/components/ListItemGroup/): The `ui5-li-group` is a special list item used exclusively for creating groups of list items within a `ui5-list`.\\n\\n![Preview of UI5 Web Components 2.0 new components](./img/new_components_v2.png)\\n\\n### **Enhanced Existing Components** \\n\\nBenefit from improvements in List Drag and Drop, Tree Drag and Drop, Tab Container Drag and Drop, and a revamped Notifications Experience. \\n\\n![Preview of UI5 Web Components 2.0 new features](./img/new_features_v2.png)\\n\\n:::note\\n\\nFor the full list of changes, please refer to the release [change log](https://github.com/UI5/webcomponents/releases).\\n\\n:::\\n\\n### **Revamped Documentation Site**\\n\\nExplore our new documentation site featuring a live editor, playground, dark mode, and an intuitive icons view. \\n\\n![UI5 Web Components 2.0 new website](./img/website.png)\\n\\n**New logo**: We are excited to introduce our new symbol and branding, reflecting the modern and dynamic nature of our project. Our new design incorporates defining elements of the feather and the flame. The feather symbolizes being lightweight, while the flame forms a connection to the phoenix, embodying the spirit of rebirth and continuous improvement. \\n\\n**Explore the Full-Screen Playground** \\n\\nOur new [full-screen playground](https://ui5.github.io/webcomponents/nightly/play/) offers a range of features designed to enhance your development experience: \\n\\n- Live code editing \\n\\n- TypeScript support \\n\\n- Code completion for components in HTML \\n\\n- Sample download \\n\\n- Easy sharing \\n\\n- Theming options \\n\\n- Predefined examples\\n\\n![UI5 Web Components 2.0 full-screen playground](./img/fullscreen_playground.png)\\n\\n## Adoption and Breaking Changes \\n\\nUI5 Web Components 2.0 is a major version and introduces breaking changes that may require updates to your code. Note: The majority of the breaking changes can be achieved with find and replace. \\n\\n:::tip\\n\\nOur comprehensive [Migration Guide](https://ui5.github.io/webcomponents/nightly/docs/migration-guides/to-version-2/) will assist you in making a smooth transition from UI5 Web Components v1.x to v2.0. \\n\\n:::\\n\\n **Notable Breaking Changes**: \\n\\n- The Belize theme has been removed and is no longer available.\\n\\n- CSP (Content Security Policy) will be ensured via the [`adoptedStyleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets) only, which are CSP-compliant by design. \\n\\n- The static area has been removed since the browser now ensures the correct positioning of popups thanks to the popover API that is fully adopted by the UI5 Web Components.\\n\\n- The Badge component (`ui5-badge`) has been renamed to Tag (`ui5-tag`).\\n\\n- The old Table (`ui5-table`) has been moved to `@ui5/webcomponents-compat`; new Table is available with better API and accessibility.\\n\\n- Public methods for opening popovers are replaced with the `open` property for declarative APIs. \\n\\n- Components like Label, Text, Link, and Title now wrap by default (`wrappingType=\\"Normal\\"` by default, `wrappingType=\\"None\\"` optionally). \\n\\n- SelectMenu and SelectMenuOption components have been removed; standard options with the popover API make them obsolete. \\n\\n- Renaming of properties, events, and enumeration values.\\n\\n- Removed APIs without alternatives: \\n\\n  - Progress Indicator (`ui5-progress-indicator`): `Disabled` property removed. \\n\\n  - Select Option (`ui5-option`): `Disabled` property removed for UX and accessibility alignment. \\n\\n  - Token (`ui5-token`): `Readonly` property removed; logic now within the Tokenizer. \\n\\n  - The `Device#isIE` method has been removed and is no longer available - the IE browser is not supported anymore.\\n\\n  - Notification List Group (`ui5-li-notification-group`): The properties `showClose`, `showCounter`, `priority`, the event `close` and the slot `actions` are removed due to the new better notification list design concept.\\n \\n## Ongoing Support for Version 1.x \\n\\n We will continue to support version 1.x until the **end of June 2025**, focusing on bug fixes to ensure continuity for our existing users. \\n\\n \\n## Get Help and Engage with the Community \\n\\n Encountering issues? Reach out for support or report bugs on our GitHub project: [Submit a bug or ask a question here](https://github.com/UI5/webcomponents/issues/new/choose). \\n\\n## Call to Action \\n\\nUI5 Web Components 2.0 is a testament to our dedication to innovation, quality, and community engagement. We are particularly excited about the groundbreaking features such as the Popover API, Form-Associated Custom Elements, and seamless time zone support. \\n\\nWe invite you to preview the new version and migrate to UI5 Web Components 2.0 to fully leverage these advancements. Together, we are entering a new era of web development, and the possibilities are endless. Thank you for being part of this exciting journey with us! \ud83d\ude4c"},{"id":"/releases/popover-api-in-v2","metadata":{"permalink":"/webcomponents/blog/releases/popover-api-in-v2","source":"@site/blog/releases/popover-api-in-v2.mdx","title":"Popover API in UI5 Web Components 2.0","description":"UI5 Web Components 2.0 will provide greatly improved popups by taking advantage of the native browser popover API.","date":"2024-04-19T10:00:00.000Z","formattedDate":"April 19, 2024","tags":[{"label":"release","permalink":"/webcomponents/blog/tags/release"},{"label":"v2","permalink":"/webcomponents/blog/tags/v-2"},{"label":"popover API","permalink":"/webcomponents/blog/tags/popover-api"}],"readingTime":4.85,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Popover API in UI5 Web Components 2.0","tags":["release","v2","popover API"],"slug":"/releases/popover-api-in-v2","date":"2024-04-19T10:00"},"unlisted":false,"prevItem":{"title":"Announcing UI5 Web Components 2.0! A New Era Begins!","permalink":"/webcomponents/blog/releases/announcing-v2"},"nextItem":{"title":"UI5 Web Components 2.0 Release Candidate is out!","permalink":"/webcomponents/blog/releases/announcing-rc-v2"}},"content":"UI5 Web Components 2.0 will provide greatly improved popups by taking advantage of the [native browser popover API](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API).\\n\\n## What is the popover API?\\n\\nThe [popover API](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API) is a browser-native solution to displaying popup-like components (Popovers, Dialogs, etc.).\\nabove all other content, regardless of its HTML structure and CSS applied.\\n\\n## Popups in **version 1.x**\\n\\nThere used to be a so-called \\"static area\\" (`<ui5-static-area>`) - a DOM element directly in the `<body>` where the popups of all components were placed.\\nThis guaranteed that even if the HTML document had `overflow: hidden`, `transform`, or similar CSS rules applied, or the component was in a *stacking context*, its popup would still be positioned correctly.\\n\\nExample of `ui5-date-picker`\'s DOM structure in **v1.24**:\\n\\n```html\\n<body>\\n    <ui5-static-area>\\n        <ui5-static-area-item> \x3c!-- A static area item, associated with the DatePicker component --\x3e\\n            #shadow-root\\n                <ui5-responsive-popover></ui5-responsive-popover> \x3c!-- here goes the Popover part of the DatePicker component --\x3e\\n        </ui5-static-area-item>\\n    </ui5-static-area>\\n\\n    .........\\n\\n    <div style=\\"transform: translate(12rem, 12rem)\\"> \x3c!-- a parent node has CSS that normally breaks popup positioning --\x3e\\n        <ui5-date-picker>\\n            #shadow-root\\n                <ui5-input></ui5-input> \x3c!-- The date Input part of the DatePicker component --\x3e\\n        </ui5-date-picker>\\n    </div>\\n</body>\\n```\\n\\nAs you can see, the component used to be physically divided in two parts:\\n - The \\"main\\" part (the `ui5-date-picker` tag itself) containing the date selection input\\n - The \\"popover\\" part (the `ui5-static-area-item` tag, associated with the said date picker) containing the picker (calendar with years/months/days).\\n\\n## Popups in **version 2.x**\\n\\nThere is no longer need for a \\"static area\\" since the browser now ensures the correct positioning of popups thanks to the popover API.\\n\\nExample of `ui5-date-picker`\'s DOM structure in **v2.0**:\\n\\n```html\\n<body>\\n    <div style=\\"transform: translate(12rem, 12rem)\\"> \x3c!-- a parent node has CSS that normally breaks popup positioning --\x3e\\n        <ui5-date-picker>\\n            #shadow-root\\n                <ui5-input></ui5-input> \x3c!-- The date Input part of the DatePicker component --\x3e\\n                <ui5-responsive-popover popover=\\"manual\\"></ui5-responsive-popover> \x3c!-- the Popover part of the DatePicker component --\x3e\\n        </ui5-date-picker>\\n    </div>\\n</body>\\n```\\n\\nThe component is no longer physically divided in two parts:\\n - Both the input and the popover are inside the `ui5-date-picker` itself\\n - The popover has the **popover=\\"manual\\"** attribute (introduced with the popover API) that ensures it will be displayed above anything else on the HTML page.\\n\\nIt\'s that simple!\\n\\n## The **practical** benefits\\n\\n### Simpler and more robust components\\n    - Easier to develop and maintain.\\n    - Everything belonging to a component is now in one place! This includes code logic, HTML and CSS.\\n\\n### Enhanced overstyling capabilities for apps\\n    - We can now provide [CSS Shadow Parts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_shadow_parts) also for the \\"popup part\\", not just in the \\"main part\\" of the component!\\n    - [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) set on the component will also have effect for its \\"popup part\\"!\\n\\nConsider the following example:\\n\\n```html\\n<body>\\n    <style>\\n        #mc::part(root) {\\n            background: blue;\\n        }\\n        #mc::part(list) {\\n            margin: 0.5rem;\\n        }\\n    </style>\\n\\n    <my-component id=\\"mc\\">\\n        #shadow-root\\n            <div part=\\"root\\"></div>\\n            <ui5-popover>\\n                <ui5-list part=\\"list\\"></ui5-list>\\n            </ui5-popover>\\n    </my-component>\\n</body>\\n```\\n\\nSince the popover is now part of the component, component authors can provide CSS Shadow Parts for elements in the popover, in addition to the existing CSS Shadow Parts.\\n\\n### Components with popups can now have physical children\\n\\nWeb components with popups had a **hard limitation** of not being able to slot children to the popup.\\n\\nExample of `ui5-select`\'s (simplified) DOM structure in **v1.24**:\\n\\n```html\\n<body>\\n    <ui5-static-area>\\n        <ui5-static-area-item> \x3c!-- static area item of the ui5-select --\x3e\\n            #shadow-root\\n                <ui5-responsive-popover> \x3c!-- the \\"dropdown\\" part of the ui5-select --\x3e\\n                    <ui5-list> \x3c!-- the list inside ui5-select\'s dropdown --\x3e\\n                        <ui5-li text=\\"Option 1\\"></ui5-li> \x3c!-- list item for the 1st ui5-option --\x3e\\n                        <ui5-li text=\\"Option 2\\"></ui5-li> \x3c!-- list item for the 2nd ui5-option --\x3e\\n                        <ui5-li text=\\"Option 3\\"></ui5-li> \x3c!-- list item for the 3rd ui5-option --\x3e\\n                    </ui5-list>\\n                </ui5-responsive-popover>\\n        </ui5-static-area-item>\\n    </ui5-static-area>\\n\\n    .........\\n\\n    <ui5-select>\\n        #shadow-root\\n            <div></div> \x3c!-- The \\"box\\" part of the select --\x3e\\n\\n        <ui5-option>Option 1</ui5-option>\\n        <ui5-option>Option 2</ui5-option>\\n        <ui5-option>Option 3</ui5-option>\\n    </ui5-select>\\n\\n</body>\\n```\\n\\nAs you can clearly see from the example, there is no way to **slot** the `ui5-option` components into the `ui5-list` as it is in a completely different part of the DOM, due to the need for a static area.\\nInstead, we can only provide **logical** `ui5-option` components and just use their **text content** for the `text` property of the list items (`ui5-li`) in the static area.\\n\\nExample of `ui5-select`\'s (simplified) DOM structure in **v2.0**:\\n\\n```html\\n<body>\\n    <ui5-select>\\n        #shadow-root\\n            <div></div> \x3c!-- The \\"box\\" part of the select --\x3e\\n            <ui5-responsive-popover> \x3c!-- the \\"dropdown\\" part of the ui5-select --\x3e\\n                <ui5-list> \x3c!-- the list inside ui5-select\'s dropdown --\x3e\\n                    <slot></slot>\\n                </ui5-list>\\n            </ui5-responsive-popover>\\n\\n        <ui5-option><strong>Option</strong> 1</ui5-option>\\n        <ui5-option><ui5-icon name=\\"accept\\"></ui5-icon> Option 2</ui5-option>\\n        <ui5-option><i>Option 3</i></ui5-option>\\n    </ui5-select>\\n\\n</body>\\n```\\n\\nNow that the popover is part of the `ui5-select` itself, it\'s possible to have **physical** `ui5-option`s and slot their content directly into the popover or its children (`ui5-list` in this example).\\n\\nThis allows us to provide support for **custom user content** for components that had strict predefined APIs in the past!\\n\\n### Easier testing for both apps and component package authors\\n    - Tests no longer need to know how to find the static area item, associated with a given component - everything is directly in the shadow root!\\n    - Writing tests is much simplified.\\n\\n### Cross-framework popup compatibility for the future\\n    - Frameworks who use the native browser popover API no longer need to synchronize themselves (negotiate `z-index` values, etc.).\\n    - The last popup to be opened will always be on top (guarnateed by the browser)!\\n\\n## When can I start using it?\\n    - The current versions of all supported browsers (Chrome, Safari, Edge, and now also Firefox as of version 125) fully support the popover API. [See Can I Use report](https://caniuse.com/?search=popover).\\n    - By the time **v2.0** is officially released (we are at **v2.0-r.c.2** as of writing this blog post) we expect that each major browser will have already released at least 3 stable versions since the introduction of the popover API.\\n\\nMake sure to check our blog for future announcements, including the official release date of **UI5 Web Components 2.0**!"},{"id":"/releases/announcing-rc-v2","metadata":{"permalink":"/webcomponents/blog/releases/announcing-rc-v2","source":"@site/blog/releases/announcing-rc-v2.mdx","title":"UI5 Web Components 2.0 Release Candidate is out!","description":"U5 Web Components project has reached a pivotal stage in its evolution, geared to embrace new standards, eliminate legacy code, and integrate consumer feedback to enhance our APIs, culminating in the highly anticipated major release, version 2.0.","date":"2024-04-18T10:00:00.000Z","formattedDate":"April 18, 2024","tags":[{"label":"release","permalink":"/webcomponents/blog/tags/release"},{"label":"v2","permalink":"/webcomponents/blog/tags/v-2"}],"readingTime":4.44,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"UI5 Web Components 2.0 Release Candidate is out!","tags":["release","v2"],"slug":"/releases/announcing-rc-v2","date":"2024-04-18T10:00"},"unlisted":false,"prevItem":{"title":"Popover API in UI5 Web Components 2.0","permalink":"/webcomponents/blog/releases/popover-api-in-v2"},"nextItem":{"title":"Preparing for UI5 Web Components 2.0","permalink":"/webcomponents/blog/releases/preparing-for-v2"}},"content":"export const Highlight = ({children, color}) => (\\n  <span\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \'5px\',\\n      color: \'#fff\',\\n      padding: \'0.1rem\',\\n    }}>\\n    {children}\\n  </span>\\n);\\n\\n# UI5 Web Components 2.0 Release Candidate is out!\\n\\nU5 Web Components project has reached a pivotal stage in its evolution, geared to embrace new standards, eliminate legacy code, and integrate consumer feedback to enhance our APIs, culminating in the highly anticipated major release, version 2.0. \\n\\nToday we are extremely happy to announce **UI5 Web Components 2.0 Release Candidate**! \ud83e\udd73\ufe0f\\nThe following `2.0` RC versions have been released:\\n- [2.0.0-rc.0](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.0) (2024-04-09)\\n- [2.0.0-rc.1](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.1) (2024-04-11)\\n- [2.0.0-rc.2](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.2) (2024-04-18) \\n- [2.0.0-rc.3](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.3) (2024-05-10)\\n- [2.0.0-rc.4 ](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.4) (2024-05-29)\\n- [2.0.0-rc.5](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.5) (2024-06-06) <Highlight color=\\"#1877F2\\">latest</Highlight> \\n\\n\\n## What\'s new\\n\\n### New features\\n\\n- **Integration of popover API**: Enjoy standard, consistent and flexible mechanism for displaying popover content on top of other page content with the integration of the [`popover API`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover) across all relevant components: [#8192](https://github.com/UI5/webcomponents/pull/8192)\\n  \\n- **Time zone Support**: Date and time components are enhanced to seamlessly adapt to different time zones, ensuring accurate presentation of dates across various regions. The time zone identifiers format aligns with the conventions used in the IANA time zone database. : [#8610](https://github.com/UI5/webcomponents/issues/8610)\\n\\n- **New Components**: Explore new additions to the UI5 Web Components family, expanding your toolkit for building rich UIs:\\n    - Text: The ui5-text component displays text that can be used in any content area of an application. By default, the text will wrap when the space is not enough. In addition, the component supports truncation via the max-lines property, by defining the number of lines the text should wrap before start truncating. [#8299](https://github.com/UI5/webcomponents/pull/8299)\\n\\n- **Components enhancements**: Benefit from enhancements to existing components such:\\n    - ui5-message-strip: introduce custom colors [#8757](https://github.com/UI5/webcomponents/pull/8757)\\n    - ui5-link: introduce `tooltip` property [#8670](https://github.com/UI5/webcomponents/pull/8670)\\n    - ui5-avatar-group: update focus handling [#8550](https://github.com/UI5/webcomponents/issues/8550) \\n    - ui5-barcode-scanner-dialog: add support for `close` and `open` events [#8753](https://github.com/UI5/webcomponents/issues/8753)\\n    - ui5-li: add support for `F2` key [#8619](https://github.com/UI5/webcomponents/issues/8619)\\n    - ui5-button: provide focus support for mobile [#8414](https://github.com/UI5/webcomponents/issues/8414)\\n    - ui5-tree: enable drag and drop [#8477](https://github.com/UI5/webcomponents/issues/8477)\\n    - ui5-tabcontainer, ui5-list: add events for reordering items by mouse [#8265](https://github.com/UI5/webcomponents/pull/8265) [#8687](https://github.com/UI5/webcomponents/pull/8687) \\n    - ui5-checkbox: update focus handling [#8553](https://github.com/UI5/webcomponents/issues/8553)\\n    - focus: new focus handling [#8590](https://github.com/UI5/webcomponents/issues/8590) \\n    - add `shadowRootOptions` for `@customElement` decorator [#8703](https://github.com/UI5/webcomponents/issues/8703)\\n\\n- **New Site for Documentation, Samples, and API Reference**: Discover a revamped documentation site with live editor, playground, dark mode, and an intuitive icons view. \\n\\n![UI5 Web Components Playground](./img/playground_dark.png)\\n\\n### Breaking changes\\nUI5 Web Components 2.0 is a new major version, including breaking changes requiring you to adjust your code accordingly. \\n\\n:::tip\\n\\nThis documentation will help you to migrate from UI5 Web Components v1.x to UI5 Web Components 2.0 with ease: [Migration guide 2.0](/docs/migration-guides/to-version-2/)\\n\\n:::\\n\\nNotable breaking changes include: \\n\\n- Discontinuing support for Internet Explorer: [#8494](https://github.com/UI5/webcomponents/pull/8494)\\n- CSP via [`adoptedStyleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets) only: [#8496](https://github.com/UI5/webcomponents/pull/8496)\\n- The JSDoc plugin has been removed, and the generation of api.json has stopped. If you previously relied on the `ui5-package/dist/api.json` file, you can now use `ui5-package/dist/custom-elements.json`: [#8518](https://github.com/UI5/webcomponents/pull/8518)\\n- Removed `UI5Element#render` method in favour of `UI5Element#renderer`: [#8501](https://github.com/UI5/webcomponents/pull/8501) \\n- Removed all `Assets-static.js` modules in favour of their dynamic counterparts - the `Assets.js` modules: [#8526](https://github.com/UI5/webcomponents/pull/8526)\\n\\n:::note\\n\\nFor the full list of changes, please refer to the release [change log](https://github.com/UI5/webcomponents/releases).\\n\\n:::\\n\\n## What\'s next\\nAnticipate the official 2.0 release between mid-June to mid-July, featuring: \ud83d\ude80\\n\\n### In-Progress Features\\n\\n-   **Form Support with Form-Associated Custom Elements**: Streamline form handling with support for the Form-Associated Custom Elements standard.\\n-   **New Components**: Dynamic Page, Form, and Tokenizer\\n-   **Component Enhancements**: Revamped Notifications Experience\\n-   **Reusable component CSS styles** Allow creating patterns/layouts or other common styling\\n\\n### In-Progress Breaking changes\\n\\n-  **Theming**: Removal of Belize (recommendation: migrate to Horizon)\\n-  **Rename of properties, events and enumarion values**\\n\\n-  **Several APIs will be replaced with more effective alternatives:**:\\n\\n\\t-   Replace all public methods for opening popover, such as `openPicker`, `togglePicker` with `open` property to promote declarative APIs\\n\\t-   Grouping of Items: Instead of using `ui5-li-groupheader` as separator in a flat structure, the API will support true nesting of ListItems inside ListItemGroup, to easier bind hierarchical data model to the UI.\\n\\t-   Menu: property `starts-section` replaced by `ui5-menu-separator` component.\\n\\t-   List: property `imag`e, replaced by slot `image`.\\n\\t-   TabContainer: `show-overflow` property, replaced by slot `overflowButton`.\\n\\t-   IllustratedMessage: property `titleLevel`, replaced by slot `title` (that you can set the level on).\\n\\n\\n:::warning[**This properties will be removed without alternative**:]\\n\\n-   Progress Indicator (ui5-progress-indicator): Remove `disabled` property \\n-   Selects\'s Option (ui5-option): Remove `disabled` property - UX and ACC standards suggest to not include any disabled items in the dropdown\\n-   Token (ui5-token): Remove the `readonly` property \\n\\n:::\\n\\n## Get help\\nEncountering issues? Don\'t hesitate to report them or seek assistance on our GitHub project: [Submit a bug or ask a question here](https://github.com/UI5/webcomponents/issues/new/choose).\\n\\n## Maintenance of 1.x\\nWhile we\'re excited about the future with UI5 Web Components 2.0, we also understand the importance of continued support for existing users. Therefore, maintenance and support for version 1.x will continue until the end of the year, focusing solely on bug fixes.\\n\\n## Conclusion\\nIn conclusion, UI5 Web Components 2.0 represents a significant leap forward in our commitment to delivering cutting-edge web development tools. We\'re excited to embark on this journey with you and look forward to seeing the amazing experiences you\'ll create with UI5 Web Components 2.0!\\n\\nStay tuned for more updates and announcements as we approach the official release date. Thank you for being part of the UI5 Web Components community! \ud83d\ude4c"},{"id":"/releases/preparing-for-v2","metadata":{"permalink":"/webcomponents/blog/releases/preparing-for-v2","source":"@site/blog/releases/preparing-for-v2.mdx","title":"Preparing for UI5 Web Components 2.0","description":"UI5 Web Components 2.0 version is on the horizon.","date":"2024-04-05T10:00:00.000Z","formattedDate":"April 5, 2024","tags":[{"label":"release","permalink":"/webcomponents/blog/tags/release"},{"label":"v2","permalink":"/webcomponents/blog/tags/v-2"}],"readingTime":2.545,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Preparing for UI5 Web Components 2.0","tags":["release","v2"],"slug":"/releases/preparing-for-v2","date":"2024-04-05T10:00"},"unlisted":false,"prevItem":{"title":"UI5 Web Components 2.0 Release Candidate is out!","permalink":"/webcomponents/blog/releases/announcing-rc-v2"}},"content":"UI5 Web Components 2.0 version is on the horizon.\\nHere\'s a summary of everything you need to know (release information, key features and breaking changes)\\nand start preparing for it.\\n\\n## Release Timelines\\n- Release `2.0` RC versions in April\\n   - [2.0.0-rc.0](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.0) (2024-04-09)\\n   - [2.0.0-rc.1](https://github.com/UI5/webcomponents/releases/tag/v2.0.0-rc.1) (2024-04-11)\\n- Release `2.0` between `mid June - mid July`\\n\\n## Migration Support\\n- [Migration guide](/docs/migration-guides/to-version-2/)\\n\\n## Maintenance of 1.x\\n- Support until the end of the year\\n- Downport of bug fixes only\\n\\n## 2.0 Features\\n\\n### Framework Features\\n- Integration of the [`popover`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover) API in all pop-up based components \\n- Form Support with [`Form-Associated Custom Elements`](https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/) standard\\n- Timezone support in all date-time components\\n \\n### New Components\\n\\n- Dynamic Page\\n- Form\\n- Text\\n- Tokenizer\\n\\n### Components Features\\n\\n- List Drag and Drop (comes with TabContainer)?\\n- Tree Drag and Drop\\n- TabContainer Drag and Drop\\n- New Notifications Experience\\n\\n### Reusable component CSS styles \\nStyles for creating patterns/layouts or other common styling\\n\\n### New Site for Documentation, Samples and API reference\\nSee the [preview](https://ui5.github.io/webcomponents/nightly/).\\n\\n- Live editor\\n- Playground\\n- Dark mode\\n- Icons view\\n\\n## 2.0 Breaking changes\\n\\n- 90% is pure API renaming for better consistency \\n- several APIs are replaced by alternatives (listed below)\\n- few APIs are removed without alternatives (listed below)\\n\\n\\n### Theming\\n- Removal of Belize (recommendation: migrate to Horizon)\\n\\n### Framework\\n-  CSP (Content Security Policy) will be ensured via [adoptedStyleSheets](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets) only.\\nThe adoptedStyleSheets are CSP compliant by design and all components styles will be defined as adoptedStyleSheets.\\n\\nThe `CSP.js` module is removed and the creation of `<style>` and `<link>` tags is no longer required as all browsers now support adoptedStyleSheets.\\n\\nAs a result, hte following APIs are not available any more and should not be used:\\n```ts\\nimport { setUseLinks } from \\"@ui5/webcomponents-base/dist/CSP.js\\"\\nimport { setPackageCSSRoot } from \\"@ui5/webcomponents-base/dist/CSP.js\\"\\nimport { setPreloadLinks } from \\"@ui5/webcomponents-base/dist/CSP.js\\"\\n```\\n\\n### Renamed APIs\\nSee the full list [here](https://github.com/UI5/webcomponents/issues/8461).\\n\\n### Replaced APIs\\n\\n- Methods `openPicker` will be replaced by `open/opener` properties to promote declarative API\\n\\n- **Grouping of Items**\\n\\nInstead of using `ui5-li-groupheader` as separator in a flat structure:\\n\\n```html\\n<ui5-list>\\n\\t<ui5-li-groupheader>group<ui5-li-groupheader/>\\n\\t<ui5-li></ui5-li>\\n\\t<ui5-li></ui5-li>\\n\\t<ui5-li></ui5-li>\\n</ui5-list>\\n```\\n\\ntrue nesting will be provided of ListItems inside ListItemGroup \\nto easier bind hierarchical data model to the UI:\\n\\n```html\\n<ui5-list>\\n\\t<ui5-li-group header-text=\\"group\\">\\n\\t\\t<ui5-li></ui5-li>\\n\\t\\t<ui5-li></ui5-li>\\n\\t\\t<ui5-li></ui5-li>\\n\\t<ui5-li-group>\\n</ui5-list>\\n```\\n\\n\\n- **Menu**: the property `starts-section` will be replaced by `ui5-menu-separator` component.\\n- **List**: the property `image` will be replaced by slot `image`\\n- **TabContainer:** the property `show-overflow` property is will be replaced by slot `overflowButton`.\\n- **IllustratedMessage:** the property `titleLevel` will be replaced by slot `title`.\\n\\n\\n### Removed APIs without alternative\\n\\n#### Progress Indicator (ui5-progress-indicator)\\n- The `disabled` property will be removed. Progress indicator isn\'t an interactive element so disabled property make no sense. \\nAlso aria-disabled is deprecated on the progressbar role since ARIA 1.2 .\\n\\n\\n#### Selects\'s Option (ui5-option)\\n- The `disabled` property will be removed. The UX and ACC standards suggest to not include any disabled items in the dropdown\\n\\n\\n#### Token (ui5-token)\\n- The `readonly` property will be removed."}]}')}}]);