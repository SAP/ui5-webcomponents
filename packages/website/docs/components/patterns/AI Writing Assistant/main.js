import '@ui5/webcomponents/dist/Label.js';
import '@ui5/webcomponents/dist/Input.js';
import "@ui5/webcomponents/dist/Menu.js";
import "@ui5/webcomponents/dist/MenuItem.js";
import "@ui5/webcomponents-icons/dist/ai.js";
import "@ui5/webcomponents-icons/dist/stop.js";
import "@ui5/webcomponents-icons/dist/navigation-left-arrow.js";
import "@ui5/webcomponents-icons/dist/navigation-right-arrow.js";

import announce from "@ui5/webcomponents-base/dist/util/InvisibleMessage.js";
import InvisibleMessageMode from "@ui5/webcomponents-base/dist/types/InvisibleMessageMode.js";

const input = document.getElementById('ai-wa-input');
const icon = document.createElement('ui5-icon');
const menuGenerate = document.getElementById('ai-wa-menu-generate');
const menuRegenerate = document.getElementById('ai-wa-menu-regenerate');

let lastInputValue = "";
let loadTimeout;

icon.setAttribute("name", "ai");
icon.setAttribute("slot", "icon");
icon.setAttribute("accessible-name", "AI Writing Assistant (Shift + F4)");
icon.setAttribute("aria-haspopup", "menu");
icon.setAttribute("show-tooltip", true);
icon.id = "ai-wa-icon";

const updateIconVisibility = (visible) => {
	visible ? input.appendChild(icon) : icon.remove();
};

const updateIconState = (iconName, iconAccessibleName) => {
	icon.name = iconName;
	icon.accessibleName = iconAccessibleName;
};

const updateInputState = (isEditable, value) => {
	input.toggleAttribute('readonly', !isEditable);
	input.value = value;
};

const addInputValue = (value) => {
	if (value && value !== "Analyzing request...") {
		lastInputValue = value;
	}
};

const stopLoading = () => {
	clearTimeout(loadTimeout);
	updateInputState(true, lastInputValue);
	updateIconState("ai", "AI Writing Assistant (Shift + F4)");
};

const transitionToLoadState = () => {
	addInputValue(input.value);
	updateInputState(false, 'Analyzing request...');
	updateIconState("stop", "Stop generating (Esc)");
	announce("AI writing assistant generating. Stop generating (ESC)", InvisibleMessageMode.Polite);

	loadTimeout = setTimeout(() => {
		updateInputState(true, 'AI Writing Assistant in Input field');
		announce("Input Field with text generated by AI", InvisibleMessageMode.Assertive);
		updateIconState("ai", "AI Writing Assistant (Shift + F4)");
		input.focus();
	}, 2000);
};

const updateMenuVisibility = (menu, isOpen = false) => {
	if (isOpen) {
		menu.open = true;
	}
}

input.addEventListener('focus', () => updateIconVisibility(true));

input.addEventListener('focusout', (e) => {
	if (!menuGenerate.open && !menuRegenerate.open && e.relatedTarget !== icon && icon.name !== "stop") {
		icon.classList.remove("icon-pressed");
		updateIconState("ai", "AI Writing Assistant (Shift + F4)");
		updateIconVisibility(false);
	}
});

icon.addEventListener("click", () => {
	icon.classList.add("icon-pressed");
	if (icon.name === "stop") {
		stopLoading();
		return;
	}

	input.value.length ? updateMenuVisibility(menuRegenerate, true) : updateMenuVisibility(menuGenerate, true);
});

[menuGenerate, menuRegenerate].forEach(menu => {
	menu.addEventListener("before-close", () => {
		icon.classList.remove("icon-pressed");
		if (icon.name !== "stop") {
			updateIconVisibility(false);
		}
	});
	menu.addEventListener("item-click", transitionToLoadState);
});

document.addEventListener('keydown', (event) => {
	const isMac = navigator.userAgent.includes('Mac');

	if (event.key === 'Escape') {
		stopLoading();
	}

	if (event.key === 'F4' && event.shiftKey && icon.name !== "stop") {
		input.value.length ? updateMenuVisibility(menuRegenerate, true) : updateMenuVisibility(menuGenerate, true);
	}

	if (event.key === 'Enter' && (event.ctrlKey || (isMac && event.metaKey))) {
		transitionToLoadState();
	}
});