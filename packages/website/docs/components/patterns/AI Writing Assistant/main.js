import '@ui5/webcomponents/dist/Label.js';
import '@ui5/webcomponents/dist/Input.js';
import "@ui5/webcomponents/dist/Menu.js";
import "@ui5/webcomponents/dist/MenuItem.js";
import "@ui5/webcomponents-icons/dist/ai.js";
import "@ui5/webcomponents-icons/dist/stop.js";
import "@ui5/webcomponents-icons/dist/navigation-left-arrow.js";
import "@ui5/webcomponents-icons/dist/navigation-right-arrow.js";

import announce from "@ui5/webcomponents-base/dist/util/InvisibleMessage.js";
import InvisibleMessageMode from "@ui5/webcomponents-base/dist/types/InvisibleMessageMode.js";

const input = document.getElementById('ai-wa-input');
const icon = document.createElement('ui5-icon');
const menuGenerate = document.getElementById('ai-wa-menu-generate');
const menuRegenerate = document.getElementById('ai-wa-menu-regenerate');

let lastInputValue = "";
let loadTimeout;

icon.id = "ai-wa-icon";
icon.accessibleName = "AI Writing Assistant (Shift + F4)";
icon.showTooltip = true;
icon.name = "ai";
icon.setAttribute("aria-haspopup", "menu");

input.addEventListener('focus', () => {
	updateIconVisibility(true);
});

input.addEventListener('focusout', e => {
	if (!menuGenerate.open && !menuRegenerate.open && e.relatedTarget !== icon) {
		updateIconState("ai", "AI Writing Assistant (Shift + F4)");
		updateIconVisibility(false);
	}
});

icon.addEventListener("click", e => {
	icon.classList.add("icon-pressed");
	if (icon.name === "stop") {
		stopLoading();
		return;
	}
	if (input.value.length) {
		updateMenuVisibility(menuRegenerate, true, true);
		updateMenuVisibility(menuGenerate, false);

	} else {
		updateMenuVisibility(menuGenerate, true, true);
		updateMenuVisibility(menuRegenerate, false);
	}
});

menuGenerate.addEventListener("before-close", e => {
	if (icon.name === "stop") {
		return;
	}
	icon.classList.remove("icon-pressed");
	updateIconVisibility(false);
});

menuRegenerate.addEventListener("before-close", e => {
	icon.classList.remove("icon-pressed");
	if (icon.name === "stop") {
		return;
	}
	updateIconVisibility(false);
});

menuGenerate.addEventListener("item-click", (e) => {
	transitionToLoadState();
});

menuRegenerate.addEventListener("item-click", (e) => {
	transitionToLoadState();
});

document.addEventListener('keydown', function (event) {
	const isMac = navigator.userAgent.includes('Mac')
	if (event.key === 'Escape') {
		stopLoading();
	}

	if (event.key === 'F4' && event.shiftKey) {
		if (input.value.length) {
			updateMenuVisibility(menuRegenerate, true, true);
			updateMenuVisibility(menuGenerate, false);
		} else {
			updateMenuVisibility(menuGenerate, true, true);
			updateMenuVisibility(menuRegenerate, false);
		}
	}

	if (event.key === 'Enter' && (event.ctrlKey || (isMac && event.metaKey))) {
		transitionToLoadState();
	}

});

function stopLoading() {
	clearTimeout(loadTimeout);
	updateInputState(true, lastInputValue);
	updateIconState("ai", "AI Writing Assistant (Shift + F4)");
}

function updateIconVisibility(visible) {
	if (visible) {
		input.appendChild(icon)
	} else {
		input.removeChild(icon)
		icon.remove();
	}
}

function updateIconState(iconName, iconAccessibleName) {
	icon.name = iconName;
	icon.accessibleName = iconAccessibleName;
}

function updateInputState(isEditable, value) {
	if (isEditable) {
		input.removeAttribute('readonly');
	} else {
		input.setAttribute('readonly', true);
	}
	input.value = value;
}

function addInputValue(value) {
	if (value && value !== "Analyzing request...") {
		lastInputValue = value;
	}
}

function transitionToLoadState() {
	addInputValue(input.value);
	updateInputState(false, 'Analyzing request...');
	updateIconState("stop", "Stop generating (Esc");
	invisibleMessageUpdate("AI writing assistant generating. Stop generating (ESC)", InvisibleMessageMode.Polite);

	loadTimeout = setTimeout(() => {
		updateInputState(true, 'AI Writing Assistant in Input field');
		invisibleMessageUpdate("Input Field with text generated by AI", InvisibleMessageMode.Assertive);
		updateIconState("ai", "AI Writing Assistant (Shift + F4)");
	}, 2000);
}

function updateMenuVisibility(menu, isVisible, isOpen = false) {
	if (isVisible) {
		updateElementVisibility(menu, "hide", "show");
	} else {
		updateElementVisibility(menu, "show", "hide");
	}
	if (isOpen) {
		menu.open = true;
	}
}

function updateElementVisibility(element, classToRemove, classToAdd) {
	element.classList.remove(classToRemove);
	element.classList.add(classToAdd);
}

function invisibleMessageUpdate(message, mode) {
	announce(message, mode);
}