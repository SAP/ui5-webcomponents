import { html } from "lit";
import AINoticeIndicator from "../../src/AINoticeIndicator.js";
import ResponsivePopover from "../../src/ResponsivePopover.js";
import Button from "../../src/Button.js";

describe("AINoticeIndicator", () => {
	describe("Rendering", () => {
		it("should render attribution link and verification text only in Default mode", () => {
			cy.mount(
				<AINoticeIndicator id="ai-default" mode="Default" />
			);
			cy.get("#ai-default").should("exist");
			cy.get("#ai-default").shadow().find(".ui5-ai-notice-indicator-root").should("exist");
			cy.get("#ai-default").shadow().find("ui5-link").should("exist");
			cy.get("#ai-default").shadow().find("ui5-label").should("exist");
			cy.get("#ai-default").shadow().find("ui5-icon").should("not.exist");
		});

		it("should render attribution link only in Shortened mode", () => {
			cy.mount(
				<AINoticeIndicator id="ai-shortened" mode="Shortened" />
			);
			cy.get("#ai-shortened").should("exist");
			cy.get("#ai-shortened").shadow().find(".ui5-ai-notice-indicator-root").should("exist");
			cy.get("#ai-shortened").shadow().find("ui5-link").should("exist");
			cy.get("#ai-shortened").shadow().find("ui5-icon").should("not.exist");
			cy.get("#ai-shortened").shadow().find("ui5-label").should("not.exist");
		});

		it("should render icon, attribution link, and verification text in Emphasized mode", () => {
			cy.mount(
				<AINoticeIndicator id="ai-emphasized" mode="Emphasized" />
			);
			cy.get("#ai-emphasized").should("exist");
			cy.get("#ai-emphasized").shadow().find(".ui5-ai-notice-indicator-root").should("exist");
			cy.get("#ai-emphasized").shadow().find("ui5-link").should("exist");
			cy.get("#ai-emphasized").shadow().find("ui5-icon").should("exist");
			cy.get("#ai-emphasized").shadow().find("ui5-label").should("exist");
		});

		it("it should render icon only in IconOnly mode", () => {
			cy.mount(
				<AINoticeIndicator id="ai-icononly" mode="IconOnly" />
			);
			cy.get("#ai-icononly").should("exist");
			cy.get("#ai-icononly").shadow().find(".ui5-ai-notice-indicator-root").should("exist");
			cy.get("#ai-icononly").shadow().find("ui5-icon").should("exist");
			cy.get("#ai-icononly").shadow().find("ui5-link").should("not.exist");
			cy.get("#ai-icononly").shadow().find("ui5-label").should("not.exist");
		});
	});

	describe("Properties", () => {
		it("displays custom attributionText and verificationText when provided", () => {
			const attribution = "Generated by AI";
			const verification = "Please verify before use";
			cy.mount(
				<AINoticeIndicator
					id="ai-custom-text"
					mode="Default"
					attributionText={attribution}
					verificationText={verification}
				/>
			);
			cy.get("#ai-custom-text").shadow().find("ui5-link").should("contain.text", attribution);
			cy.get("#ai-custom-text").shadow().find("ui5-label").should("contain.text", verification);
		});

		it("falls back to default i18n texts when properties are not set", () => {
			cy.mount(
				<AINoticeIndicator id="ai-default-text" mode="Default" />
			);
			cy.get("#ai-default-text").shadow().find("ui5-link").should("not.be.empty");
			cy.get("#ai-default-text").shadow().find("ui5-label").should("not.be.empty");
		});
	});

	describe("Popover Slot", () => {
		it("renders slotted popover content", () => {
			cy.mount(
				<AINoticeIndicator id="ai-popover" mode="Default">
					<ResponsivePopover
						slot="aiNoticePopover"
						id="test-popover"
						headerText="Popover Header"
					>
						<Button id="popover-btn">Inside Popover</Button>
					</ResponsivePopover>
				</AINoticeIndicator>
			);
			cy.get("#ai-popover").shadow().find("slot[name='aiNoticePopover']").should("exist");
			cy.get("#test-popover").should("exist");
		});

		it("clicking the attribution link opens the popover", () => {
			cy.mount(
				<AINoticeIndicator id="ai-popover-click" mode="Default">
					<ResponsivePopover
						slot="aiNoticePopover"
						id="test-popover-click"
						headerText="Popover Header"
					>
						<Button id="popover-btn-click">Inside Popover</Button>
					</ResponsivePopover>
				</AINoticeIndicator>
			);
			cy.get("#ai-popover-click").shadow().find("ui5-link").click();
			cy.get("#test-popover-click").should("have.prop", "open", true);
		});
	});


});
 