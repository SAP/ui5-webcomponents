{"version":3,"file":"Tree.stories.c44e7c56.js","sources":["../../../_stories/main/Tree/argTypes.ts","../../../_stories/main/Tree/Tree.stories.ts"],"sourcesContent":["export default {\n\t\"mode\": {\n\t\t\"control\": \"select\",\n\t\t\"options\": [\n\t\t\t\"Delete\",\n\t\t\t\"MultiSelect\",\n\t\t\t\"None\",\n\t\t\t\"SingleSelect\",\n\t\t\t\"SingleSelectAuto\",\n\t\t\t\"SingleSelectBegin\",\n\t\t\t\"SingleSelectEnd\"\n\t\t]\n\t},\n\t\"default\": {\n\t\t\"control\": {\n\t\t\t\"type\": \"text\"\n\t\t}\n\t},\n\t\"header\": {\n\t\t\"control\": {\n\t\t\t\"type\": \"text\"\n\t\t}\n\t},\n\t\"walk\": {\n\t\t\"table\": {\n\t\t\t\"category\": \"Methods\"\n\t\t}\n\t}\n};\nexport const componentInfo = {\n    \"package\": \"@ui5/webcomponents\",\n    \"since\": \"1.0.0-rc.8\"\n};\nexport type StoryArgsSlots = {\n\tdefault: string;\n\theader: string;\n}","import { html } from \"lit-html\";\nimport { unsafeHTML } from \"lit-html/directives/unsafe-html.js\";\nimport type { Meta, StoryFn } from \"@storybook/web-components\";\nimport argTypes, { componentInfo } from \"./argTypes.js\";\nimport type { StoryArgsSlots } from \"./argTypes.js\";\nimport type { UI5StoryArgs } from \"../../../types.js\";\nimport { DocsPage } from \"../../../.storybook/docs\";\nimport type Tree from \"@ui5/webcomponents/dist/Tree.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\nconst component = \"ui5-tree\";\nexport default ({\n  title: \"Main/Tree\",\n  component,\n  subcomponents: {\n    TreeItem: \"ui5-tree-item\"\n  },\n  parameters: {\n    docs: {\n      page: DocsPage({\n        ...componentInfo,\n        component\n      })\n    }\n  },\n  argTypes\n} as Meta<Tree>);\nconst Template: UI5StoryArgs<Tree, StoryArgsSlots> = args => html`<ui5-tree\n    mode=\"${ifDefined(args.mode)}\"\n    no-data-text=\"${ifDefined(args.noDataText)}\"\n    header-text=\"${ifDefined(args.headerText)}\"\n    footer-text=\"${ifDefined(args.footerText)}\"\n    accessible-name=\"${ifDefined(args.accessibleName)}\"\n    accessible-name-ref=\"${ifDefined(args.accessibleNameRef)}\"\n>\n    ${unsafeHTML(args.header)} ${unsafeHTML(args.default)}\n</ui5-tree>`;\nexport const Basic = Template.bind({});\nBasic.args = {\n  default: `\n    <ui5-tree-item expanded=\"\" text=\"Tree 1\" icon=\"paste\" selected=\"\">\n        <ui5-tree-item expanded=\"\" text=\"Tree 1.1\" selected=\"\">\n            <ui5-tree-item text=\"Tree 1.1.1\"></ui5-tree-item>\n            <ui5-tree-item text=\"Tree 1.1.2\"></ui5-tree-item>\n        </ui5-tree-item>\n    </ui5-tree-item>\n    <ui5-tree-item text=\"Tree 2\" icon=\"copy\">\n        <ui5-tree-item text=\"Tree 2.1\">\n            <ui5-tree-item text=\"Tree 2.1.1\"></ui5-tree-item>\n            <ui5-tree-item text=\"Tree 2.1.2\">\n                <ui5-tree-item text=\"Tree 2.1.2.1\"></ui5-tree-item>\n                <ui5-tree-item text=\"Tree 2.1.2.2\"></ui5-tree-item>\n                <ui5-tree-item text=\"Tree 2.1.2.3\"></ui5-tree-item>\n                <ui5-tree-item text=\"Tree 2.1.2.5\"></ui5-tree-item>\n            </ui5-tree-item>\n        </ui5-tree-item>\n        <ui5-tree-item text=\"Tree 2.2\"></ui5-tree-item>\n    </ui5-tree-item>\n    <ui5-tree-item expanded=\"\" text=\"Tree 3 (no icon)\"> </ui5-tree-item>`\n};\nexport const DynamicContent: StoryFn = () => html`\n    <ui5-busy-indicator id=\"busy\" class=\"full-width\">\n        <ui5-tree id=\"treeDynamic\" mode=\"None\" class=\"full-width\">\n            <ui5-tree-item text=\"Has pre-loaded children\">\n                <ui5-tree-item text=\"Child 1\"></ui5-tree-item>\n                <ui5-tree-item text=\"Child 2\"></ui5-tree-item>\n            </ui5-tree-item>\n            <ui5-tree-item text=\"Has no children at all\"></ui5-tree-item>\n            <ui5-tree-item\n                id=\"dynamicNode\"\n                text=\"Has children, but not yet loaded\"\n                has-children=\"\"\n            ></ui5-tree-item>\n        </ui5-tree>\n    </ui5-busy-indicator>\n    <script>\n        const busyIndicator = document.getElementById(\"busy\");\n        const dynamicTree = document.getElementById(\"treeDynamic\");\n        dynamicTree.addEventListener(\"item-toggle\", function (event) {\n            const item = event.detail.item; // get the node that is toggled\n            // Only for the dynamic node, and only when it's empty\n            if (item.id === \"dynamicNode\" && item.children.length === 0) {\n                busyIndicator.active = true; // block the tree from the user\n                event.preventDefault(); // do not let the toggle button switch yet\n                setTimeout(function () {\n                    const newItem = document.createElement(\"ui5-tree-item\"); // Fetching from db....\n                    newItem.text = \"Node fetched from DB after 2 sec\";\n                    item.appendChild(newItem); // add the newly fetched node to the tree\n                    item.toggle(); // now manually switch the toggle button\n                    busyIndicator.active = false; // unblock the tree\n                }, 2000);\n            }\n        });\n    </script>\n`;\nexport const TreeWithCustomItems = Template.bind({});\nTreeWithCustomItems.args = {\n  header: `\n    <div slot=\"header\">\n        <ui5-title>Tree with custom items</ui5-title>\n    </div>`,\n  default: `\n    <ui5-tree-item-custom\n        expanded=\"true\"\n        show-toggle-button=\"\"\n        hide-selection-element=\"\"\n        type=\"Active\"\n        level=\"1\"\n    >\n        <ui5-button slot=\"content\">Level 1</ui5-button>\n        <ui5-tree-item-custom\n            type=\"Active\"\n            show-toggle-button=\"\"\n            level=\"2\"\n            expanded=\"true\"\n        >\n            <ui5-select slot=\"content\">\n                <ui5-option>Level 2</ui5-option>\n                <ui5-option>Option 2.1</ui5-option>\n                <ui5-option>Option 2.3</ui5-option>\n            </ui5-select>\n            <ui5-tree-item-custom\n                hide-selection-element=\"\"\n                type=\"Active\"\n                level=\"3\"\n            >\n                <ui5-button slot=\"content\">Level 3</ui5-button>\n            </ui5-tree-item-custom>\n        </ui5-tree-item-custom>\n    </ui5-tree-item-custom>`\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"args => html`<ui5-tree\\n    mode=\\\"${ifDefined(args.mode)}\\\"\\n    no-data-text=\\\"${ifDefined(args.noDataText)}\\\"\\n    header-text=\\\"${ifDefined(args.headerText)}\\\"\\n    footer-text=\\\"${ifDefined(args.footerText)}\\\"\\n    accessible-name=\\\"${ifDefined(args.accessibleName)}\\\"\\n    accessible-name-ref=\\\"${ifDefined(args.accessibleNameRef)}\\\"\\n>\\n    ${unsafeHTML(args.header)} ${unsafeHTML(args.default)}\\n</ui5-tree>`\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nDynamicContent.parameters = {\n  ...DynamicContent.parameters,\n  docs: {\n    ...DynamicContent.parameters?.docs,\n    source: {\n      originalSource: \"() => html`\\n    <ui5-busy-indicator id=\\\"busy\\\" class=\\\"full-width\\\">\\n        <ui5-tree id=\\\"treeDynamic\\\" mode=\\\"None\\\" class=\\\"full-width\\\">\\n            <ui5-tree-item text=\\\"Has pre-loaded children\\\">\\n                <ui5-tree-item text=\\\"Child 1\\\"></ui5-tree-item>\\n                <ui5-tree-item text=\\\"Child 2\\\"></ui5-tree-item>\\n            </ui5-tree-item>\\n            <ui5-tree-item text=\\\"Has no children at all\\\"></ui5-tree-item>\\n            <ui5-tree-item\\n                id=\\\"dynamicNode\\\"\\n                text=\\\"Has children, but not yet loaded\\\"\\n                has-children=\\\"\\\"\\n            ></ui5-tree-item>\\n        </ui5-tree>\\n    </ui5-busy-indicator>\\n    <script>\\n        const busyIndicator = document.getElementById(\\\"busy\\\");\\n        const dynamicTree = document.getElementById(\\\"treeDynamic\\\");\\n        dynamicTree.addEventListener(\\\"item-toggle\\\", function (event) {\\n            const item = event.detail.item; // get the node that is toggled\\n            // Only for the dynamic node, and only when it's empty\\n            if (item.id === \\\"dynamicNode\\\" && item.children.length === 0) {\\n                busyIndicator.active = true; // block the tree from the user\\n                event.preventDefault(); // do not let the toggle button switch yet\\n                setTimeout(function () {\\n                    const newItem = document.createElement(\\\"ui5-tree-item\\\"); // Fetching from db....\\n                    newItem.text = \\\"Node fetched from DB after 2 sec\\\";\\n                    item.appendChild(newItem); // add the newly fetched node to the tree\\n                    item.toggle(); // now manually switch the toggle button\\n                    busyIndicator.active = false; // unblock the tree\\n                }, 2000);\\n            }\\n        });\\n    </script>\\n`\",\n      ...DynamicContent.parameters?.docs?.source\n    }\n  }\n};\nTreeWithCustomItems.parameters = {\n  ...TreeWithCustomItems.parameters,\n  docs: {\n    ...TreeWithCustomItems.parameters?.docs,\n    source: {\n      originalSource: \"args => html`<ui5-tree\\n    mode=\\\"${ifDefined(args.mode)}\\\"\\n    no-data-text=\\\"${ifDefined(args.noDataText)}\\\"\\n    header-text=\\\"${ifDefined(args.headerText)}\\\"\\n    footer-text=\\\"${ifDefined(args.footerText)}\\\"\\n    accessible-name=\\\"${ifDefined(args.accessibleName)}\\\"\\n    accessible-name-ref=\\\"${ifDefined(args.accessibleNameRef)}\\\"\\n>\\n    ${unsafeHTML(args.header)} ${unsafeHTML(args.default)}\\n</ui5-tree>`\",\n      ...TreeWithCustomItems.parameters?.docs?.source\n    }\n  }\n};"],"names":["argTypes","componentInfo","_a","component","Tree_stories","DocsPage","Template","args","html","ifDefined","unsafeHTML","Basic","DynamicContent","__template","TreeWithCustomItems","_c","_b"],"mappings":"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"}