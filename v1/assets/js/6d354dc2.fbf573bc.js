"use strict";(self.webpackChunk_ui5_webcomponents_website=self.webpackChunk_ui5_webcomponents_website||[]).push([[7082],{8441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var s=n(1085),i=n(1184);const l={},r="Understanding UI5 Web Components Metadata",d={id:"docs/development/understanding-components-metadata",title:"Understanding UI5 Web Components Metadata",description:"Metadata is a JavaScript object, containing information about the public interface of a UI5 Web Component (tag name, properties, etc.).",source:"@site/docs/docs/5-development/03-understanding-components-metadata.md",sourceDirName:"docs/5-development",slug:"/docs/development/understanding-components-metadata",permalink:"/webcomponents/v1/docs/development/understanding-components-metadata",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Developing Custom UI5 Web Components",permalink:"/webcomponents/v1/docs/development/custom-UI5-Web-Components"},next:{title:"Understanding the Handlebars (.hbs) Templates",permalink:"/webcomponents/v1/docs/development/understanding-hbs-templates"}},o={},a=[{value:"Tag",id:"tag",level:2},{value:"Example:",id:"example",level:4},{value:"Properties / Attributes",id:"properties--attributes",level:2},{value:"Example",id:"example-1",level:4},{value:"Property configuration settings",id:"property-configuration-settings",level:4},{value:"Types",id:"types",level:4},{value:"Examples of prebuilt custom types",id:"examples-of-prebuilt-custom-types",level:4},{value:"Slots",id:"slots",level:2},{value:"Example",id:"example-2",level:4},{value:"Slot configuration settings",id:"slot-configuration-settings",level:4},{value:"Allowed slot types",id:"allowed-slot-types",level:4},{value:"Managed slots",id:"managed-slots",level:2},{value:"Language-aware components",id:"language-aware-components",level:2},{value:"Theme-aware components",id:"theme-aware-components",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"understanding-ui5-web-components-metadata",children:"Understanding UI5 Web Components Metadata"}),"\n",(0,s.jsx)(t.p,{children:"Metadata is a JavaScript object, containing information about the public interface of a UI5 Web Component (tag name, properties, etc.)."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Disclaimer: The information below is for UI5 Web Components development only. It is experimental and may change."})}),"\n",(0,s.jsx)(t.h2,{id:"tag",children:"Tag"}),"\n",(0,s.jsx)(t.p,{children:"Defines the HTML tag for the Web Component."}),"\n",(0,s.jsx)(t.h4,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"tag": "ui5-my-element",\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"properties--attributes",children:"Properties / Attributes"}),"\n",(0,s.jsx)(t.p,{children:"Defines the HTML properties for the Web Component."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note about attributes:"})," By default, for each property an equivalent attribute is supported. Attributes have the same names as properties, but in ",(0,s.jsx)(t.code,{children:"kebab-case"})," rather than ",(0,s.jsx)(t.code,{children:"camelCase"}),".\nProperties of type ",(0,s.jsx)(t.code,{children:"Object"}),", properties with ",(0,s.jsx)(t.code,{children:"multiple"})," set to",(0,s.jsx)(t.code,{children:"true"})," and properties with ",(0,s.jsx)(t.code,{children:"noAttribute"})," set to ",(0,s.jsx)(t.code,{children:"true"})," do not have an attribute equivalent."]}),"\n",(0,s.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"properties": {\n\t\t"message": {\n\t\t\t"type": String,\n\t\t\t"defaultValue": "Hello",\n\t\t},\n\t\t"shown": {\n\t\t\t"type": Boolean,\n\t\t\t"noAttribute": true,\n\t\t},\n\t\t"settings": {\n\t\t\t"type": Object,\n\t\t},\n\t\t"nums": {\n\t\t\t"type": Integer,\n\t\t\t"multiple": true,\n\t\t},\n\t\t"animationDuration": {\n\t\t\t"type": Integer,\n\t\t},\n\t},\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"property-configuration-settings",children:"Property configuration settings"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Setting"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"type"})}),(0,s.jsx)(t.td,{children:"Property type"}),(0,s.jsx)(t.td,{children:"N/A"}),(0,s.jsx)(t.td,{children:"The type of the property. For more information on types see the table below."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"defaultValue"})}),(0,s.jsx)(t.td,{children:"Any valid value for the type"}),(0,s.jsx)(t.td,{children:"undefined"}),(0,s.jsx)(t.td,{children:'Default value of the property. Cannot be set for type "Boolean". Booleans are always false by default in HTML.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"multiple"})}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:"false"}),(0,s.jsx)(t.td,{children:"Indicates whether the property represents a single value or is an array of values of the given type."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"noAttribute"})}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:"false"}),(0,s.jsx)(t.td,{children:"No attribute equivalent will be created for that property. Always true for properties of type Object."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"type"})," setting is required."]}),"\n",(0,s.jsx)(t.h4,{id:"types",children:"Types"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Class to Use"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{children:"String value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Boolean"})}),(0,s.jsx)(t.td,{children:"Boolean value - always false by default"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"object"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Object"})}),(0,s.jsx)(t.td,{children:"JS Object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"custom type"}),(0,s.jsxs)(t.td,{children:["Extend ",(0,s.jsx)(t.code,{children:"@ui5/webcomponents-base/dist/types/DataType.js"})]}),(0,s.jsx)(t.td,{children:"Used mainly for enumerations"})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"examples-of-prebuilt-custom-types",children:"Examples of prebuilt custom types"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Class to Use"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Integer"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"@ui5/webcomponents-base/dist/types/Integer.js"})}),(0,s.jsx)(t.td,{children:"Integer value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ValueState"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"@ui5/webcomponents-base/dist/types/ValueState.js"})}),(0,s.jsxs)(t.td,{children:["Enumeration with: ",(0,s.jsx)(t.code,{children:"None"}),", ",(0,s.jsx)(t.code,{children:"Error"}),", ",(0,s.jsx)(t.code,{children:"Warning"}),", ",(0,s.jsx)(t.code,{children:"Success"})," values"]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"slots",children:"Slots"}),"\n",(0,s.jsxs)(t.p,{children:["Defines the ",(0,s.jsx)(t.code,{children:"slots"})," that will be provided by this UI5 Web Component."]}),"\n",(0,s.jsx)(t.h4,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"slots": {\n\t\t"default": {\n\t\t\t"type": Node,\n\t\t},\n\t\t"footer": {\n\t\t\t"type": HTMLElement,\n\t\t},\n\t\t"rows": {\n\t\t\t"type": HTMLElement,\n\t\t\t"individualSlots": true,\n\t\t}\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"slot-configuration-settings",children:"Slot configuration settings"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Setting"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"type"})," *"]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"HTMLElement"})," or ",(0,s.jsx)(t.code,{children:"Node"})]}),(0,s.jsx)(t.td,{children:"N/A"}),(0,s.jsx)(t.td,{children:"The type of the children that can go into that slot."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"individualSlots"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Boolean"})}),(0,s.jsx)(t.td,{children:"false"}),(0,s.jsxs)(t.td,{children:["If set to ",(0,s.jsx)(t.code,{children:"true"}),", each child will have its own slot, allowing you to arrange/wrap the children arbitrarily."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"propertyName"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{children:"N/A"}),(0,s.jsx)(t.td,{children:"Allows to set the name of the property on the Web Component, where the children belonging to this slot will be stored."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," **"]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"Boolean"})," or ",(0,s.jsx)(t.code,{children:"Object"})]}),(0,s.jsx)(t.td,{children:"false"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:"Experimental, do not use."})," Defines whether every invalidation of a UI5 Web Component in this slot should trigger an invalidation of the parent UI5 Web Component."]})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"*"})," The ",(0,s.jsx)(t.code,{children:"type"})," setting is required."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"**"}),"\n",(0,s.jsx)(t.strong,{children:"Important:"})," ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," is not meant to be used with standard DOM Elements and is not to be confused with ",(0,s.jsx)(t.code,{children:"MutationObserver"}),"-like functionality.\nIt rather targets the use case of components that slot abstract items (",(0,s.jsx)(t.code,{children:"UI5Element"})," instances without a template) and require to be invalidated in turn whenever these items are invalidated."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," setting can be either a ",(0,s.jsx)(t.code,{children:"Boolean"})," (",(0,s.jsx)(t.code,{children:"true"})," meaning invalidate the component on any change of a child in this slot) or an ",(0,s.jsx)(t.code,{children:"Object"})," with ",(0,s.jsx)(t.code,{children:"properties"})," and ",(0,s.jsx)(t.code,{children:"slots"})," fields. They in turn can be either of\ntype ",(0,s.jsx)(t.code,{children:"Boolean"})," (",(0,s.jsx)(t.code,{children:"true"})," meaning invalidate on any property change or any slot change) or ",(0,s.jsx)(t.code,{children:"Array"})," of strings indicating exactly which properties or slots lead to invalidation."]}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["In the following example, since ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," is not used (",(0,s.jsx)(t.code,{children:"false"})," by default), the component will be invalidated whenever children are added/removed in the ",(0,s.jsx)(t.code,{children:"tabs"})," slot,\nbut not whenever a child in that slot changes."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n   managedSlots: true,\n   slots: {\n   \t"default": {\n   \t\t"type": "HTMLElement",\n   \t\t"propertyName": "tabs",\n   \t}\n   }\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Setting ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," to ",(0,s.jsx)(t.code,{children:"true"})," means: invalidate the component whenever a child in the ",(0,s.jsx)(t.code,{children:"tabs"})," slot gets invalidated, regardless of the reason."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n   managedSlots: true,\n   slots: {\n   \t"default": {\n   \t\t"type": "HTMLElement",\n   \t\t"propertyName": "tabs",\n   \t\t"invalidateOnChildChange": true\n   \t}\n   }\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The example below results in exactly the same behavior as the one above, but it uses the more explicit ",(0,s.jsx)(t.code,{children:"Object"})," format:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n   managedSlots: true,\n   slots: {\n   \t"default": {\n   \t\t"type": "HTMLElement",\n   \t\t"propertyName": "tabs",\n   \t\t"invalidateOnChildChange": {\n   \t\t\t"properties": true,\n   \t\t\t"slots": true\n   \t\t}\n   \t}\n   }\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The following example uses the ",(0,s.jsx)(t.code,{children:"Object"})," format again and means: invalidate the component whenever the children in this slot are invalidated due to property changes, but not due\nto slot changes. Here ",(0,s.jsx)(t.code,{children:'"slots": false'})," is added for completeness (as ",(0,s.jsx)(t.code,{children:"false"})," is the default value for both ",(0,s.jsx)(t.code,{children:"properties"})," and ",(0,s.jsx)(t.code,{children:"slots"}),")"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n   managedSlots: true,\n   slots: {\n   \t"default": {\n   \t\t"type": "HTMLElement",\n   \t\t"propertyName": "tabs",\n   \t\t"invalidateOnChildChange": {\n   \t\t\t"properties": true,\n   \t\t\t"slots": false\n   \t\t}\n   \t}\n   }\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The final example shows the most complex format of ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," which allows to define which slots or properties in the children inside that slot lead to invalidation of the component:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n   managedSlots: true,\n   slots: {\n   \t"default": {\n   \t\t"type": "HTMLElement",\n   \t\t"propertyName": "tabs",\n   \t\t"invalidateOnChildChange": {\n   \t\t\t"properties": ["text", "selected", "disabled"],\n   \t\t\t"slots": ["default"]\n   \t\t}\n   \t}\n   }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Notes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Children without a ",(0,s.jsx)(t.code,{children:"slot"})," attribute will be assigned to the ",(0,s.jsx)(t.code,{children:"default"})," slot."]}),"\n",(0,s.jsxs)(t.li,{children:["All HTML text nodes will be assigned to the ",(0,s.jsx)(t.code,{children:"default"})," slot, as they cannot have a ",(0,s.jsx)(t.code,{children:"slot"})," attribute."]}),"\n",(0,s.jsxs)(t.li,{children:['For all slots the Web Component will have a property created, with the name of the slot, to hold a list of all children assigned to this slot.\nFor example, if you have a slot named "rows", "this.rows" will be an array, holding references to all children with ',(0,s.jsx)(t.code,{children:'slot="rows"'}),", or no slot, if rows was default."]}),"\n",(0,s.jsxs)(t.li,{children:["For the ",(0,s.jsx)(t.code,{children:"default"})," slot you can provide a ",(0,s.jsx)(t.code,{children:"propertyName"})," setting.\nFor example, if your default slot has a ",(0,s.jsx)(t.code,{children:'propertyName: "items"'}),', then "this.items" will hold all children that were assigned to the default slot.']}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"allowed-slot-types",children:"Allowed slot types"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Node"}),(0,s.jsx)(t.td,{children:"Accepts both Text nodes and HTML Elements"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"HTMLElement"}),(0,s.jsx)(t.td,{children:"Accepts HTML Elements only"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"managed-slots",children:"Managed slots"}),"\n",(0,s.jsx)(t.p,{children:"Determines whether the framework should manage the slots of this UI5 Web Component."}),"\n",(0,s.jsx)(t.p,{children:"This setting is useful for UI5 Web Components that don't just slot children, but additionally base their own\nrendering on the presence/absence/type of children."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"managedSlots": true\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"managedSlots"})," is set to ",(0,s.jsx)(t.code,{children:"true"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The framework will invalidate this UI5 Web Component, whenever its children are added/removed/rearranged (and additionally when invalidated, if ",(0,s.jsx)(t.code,{children:"invalidateOnChildChange"})," is set)."]}),"\n",(0,s.jsx)(t.li,{children:"If any of this UI5 Web Component's children are custom elements, the framework will await until they are all\ndefined and upgraded, before rendering the component for the first time."}),"\n",(0,s.jsxs)(t.li,{children:["The framework will create properties for each slot on this UI5 Web Component's instances for easier access\nto the slotted children. For example, if there are ",(0,s.jsx)(t.code,{children:"header"}),", ",(0,s.jsx)(t.code,{children:"content"})," and ",(0,s.jsx)(t.code,{children:"footer"})," slots, there will be\nrespectively ",(0,s.jsx)(t.code,{children:"header"}),", ",(0,s.jsx)(t.code,{children:"content"})," and ",(0,s.jsx)(t.code,{children:"footer"})," properties of type ",(0,s.jsx)(t.code,{children:"Array"})," holding the slotted children for each slot.\n",(0,s.jsx)(t.strong,{children:"Note:"})," You can use the ",(0,s.jsx)(t.code,{children:"propertyName"})," metadata entity, described above, to modify these."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In essence, set this to ",(0,s.jsx)(t.code,{children:"true"})," if the UI5 Web Component you're developing should be aware of its children\nfor the purposes of its own state management and rendering (contrary to just displaying them)."]}),"\n",(0,s.jsxs)(t.p,{children:["An example of a component that would benefit from ",(0,s.jsx)(t.code,{children:"managedSlots"})," is a Tab Container that monitors its children (Tabs)\nin order to display a link on its Tab Strip for each Tab child. Therefore, it would need to be invalidated whenever\nTabs are added/removed, in order to update its own state and visualization."]}),"\n",(0,s.jsx)(t.h2,{id:"language-aware-components",children:"Language-aware components"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"languageAware"})," metadata setting determines if the component should be re-rendered whenever the language changes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"languageAware": true\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"You should use this setting if your component has translatable texts, therefore needs to be re-rendered when the app\nchanges the language."}),"\n",(0,s.jsx)(t.h2,{id:"theme-aware-components",children:"Theme-aware components"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"themeAware"})," metadata setting determines if the component should re-render whenever the theme changes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n\t"themeAware": true\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Important: You should almost never use this setting."})}),"\n",(0,s.jsxs)(t.p,{children:["Normally components are built in such a way that their structure\nis exactly the same for all themes and whenever the theme changes ",(0,s.jsx)(t.em,{children:"only CSS Variables are changed"})," and the component itself\ndoes not need to be re-rendered - the browser automatically updates the styles when CSS Variables get new values."]}),"\n",(0,s.jsxs)(t.p,{children:["However, there are some very rare cases where a component must behave differently (opposed to just look differently) based on the theme.\nFor example, the ",(0,s.jsx)(t.code,{children:"ui5-icon"})," component must show different versions of the icons based on the theme. Use the ",(0,s.jsx)(t.code,{children:"themeAware"})," setting\nin these exceptional cases to guarantee that your component will be re-rendered on theme change."]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1184:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(4041);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);